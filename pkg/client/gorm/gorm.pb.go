// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: types/gorm.proto

package gorm

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MySQLOptions struct {
	Host                  string          `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	Username              string          `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	Password              string          `protobuf:"bytes,3,opt,name=password,proto3" json:"password,omitempty"`
	Schema                string          `protobuf:"bytes,4,opt,name=schema,proto3" json:"schema,omitempty"`
	MaxIdle               int32           `protobuf:"varint,5,opt,name=max_idle,json=maxIdle,proto3" json:"max_idle,omitempty"`
	MaxIdleConnections    int32           `protobuf:"varint,6,opt,name=max_idle_connections,json=maxIdleConnections,proto3" json:"max_idle_connections,omitempty"`
	MaxOpenConnections    int32           `protobuf:"varint,7,opt,name=max_open_connections,json=maxOpenConnections,proto3" json:"max_open_connections,omitempty"`
	MaxConnectionLifeTime *types.Duration `protobuf:"bytes,8,opt,name=max_connection_lifeTime,json=maxConnectionLifeTime,proto3" json:"max_connection_lifeTime,omitempty"`
	Charset               string          `protobuf:"bytes,9,opt,name=charset,proto3" json:"charset,omitempty"`
	Collation             string          `protobuf:"bytes,10,opt,name=collation,proto3" json:"collation,omitempty"`
	TablePrefix           string          `protobuf:"bytes,11,opt,name=table_prefix,json=tablePrefix,proto3" json:"table_prefix,omitempty"`
	XXX_NoUnkeyedLiteral  struct{}        `json:"-"`
	XXX_unrecognized      []byte          `json:"-"`
	XXX_sizecache         int32           `json:"-"`
}

func (m *MySQLOptions) Reset()         { *m = MySQLOptions{} }
func (m *MySQLOptions) String() string { return proto.CompactTextString(m) }
func (*MySQLOptions) ProtoMessage()    {}
func (*MySQLOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_fc984471852f6c4f, []int{0}
}
func (m *MySQLOptions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MySQLOptions.Unmarshal(m, b)
}
func (m *MySQLOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MySQLOptions.Marshal(b, m, deterministic)
}
func (m *MySQLOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MySQLOptions.Merge(m, src)
}
func (m *MySQLOptions) XXX_Size() int {
	return xxx_messageInfo_MySQLOptions.Size(m)
}
func (m *MySQLOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_MySQLOptions.DiscardUnknown(m)
}

var xxx_messageInfo_MySQLOptions proto.InternalMessageInfo

func (m *MySQLOptions) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *MySQLOptions) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *MySQLOptions) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *MySQLOptions) GetSchema() string {
	if m != nil {
		return m.Schema
	}
	return ""
}

func (m *MySQLOptions) GetMaxIdle() int32 {
	if m != nil {
		return m.MaxIdle
	}
	return 0
}

func (m *MySQLOptions) GetMaxIdleConnections() int32 {
	if m != nil {
		return m.MaxIdleConnections
	}
	return 0
}

func (m *MySQLOptions) GetMaxOpenConnections() int32 {
	if m != nil {
		return m.MaxOpenConnections
	}
	return 0
}

func (m *MySQLOptions) GetMaxConnectionLifeTime() *types.Duration {
	if m != nil {
		return m.MaxConnectionLifeTime
	}
	return nil
}

func (m *MySQLOptions) GetCharset() string {
	if m != nil {
		return m.Charset
	}
	return ""
}

func (m *MySQLOptions) GetCollation() string {
	if m != nil {
		return m.Collation
	}
	return ""
}

func (m *MySQLOptions) GetTablePrefix() string {
	if m != nil {
		return m.TablePrefix
	}
	return ""
}

type SQLiteOptions struct {
	Path                 string   `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	TablePrefix          string   `protobuf:"bytes,2,opt,name=table_prefix,json=tablePrefix,proto3" json:"table_prefix,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SQLiteOptions) Reset()         { *m = SQLiteOptions{} }
func (m *SQLiteOptions) String() string { return proto.CompactTextString(m) }
func (*SQLiteOptions) ProtoMessage()    {}
func (*SQLiteOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_fc984471852f6c4f, []int{1}
}
func (m *SQLiteOptions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SQLiteOptions.Unmarshal(m, b)
}
func (m *SQLiteOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SQLiteOptions.Marshal(b, m, deterministic)
}
func (m *SQLiteOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SQLiteOptions.Merge(m, src)
}
func (m *SQLiteOptions) XXX_Size() int {
	return xxx_messageInfo_SQLiteOptions.Size(m)
}
func (m *SQLiteOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_SQLiteOptions.DiscardUnknown(m)
}

var xxx_messageInfo_SQLiteOptions proto.InternalMessageInfo

func (m *SQLiteOptions) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *SQLiteOptions) GetTablePrefix() string {
	if m != nil {
		return m.TablePrefix
	}
	return ""
}

func init() {
	proto.RegisterType((*MySQLOptions)(nil), "idas.client.gorm.MySQLOptions")
	proto.RegisterType((*SQLiteOptions)(nil), "idas.client.gorm.SQLiteOptions")
}

func init() { proto.RegisterFile("types/gorm.proto", fileDescriptor_fc984471852f6c4f) }

var fileDescriptor_fc984471852f6c4f = []byte{
	// 362 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x92, 0xcd, 0x6e, 0xea, 0x30,
	0x10, 0x85, 0x15, 0xfe, 0x31, 0x5c, 0x09, 0x59, 0xf7, 0xc7, 0x70, 0xab, 0x8a, 0xb2, 0x62, 0x95,
	0x54, 0xed, 0xb2, 0xbb, 0xb6, 0xaa, 0x54, 0x89, 0x8a, 0x02, 0x5d, 0x75, 0x13, 0x99, 0x64, 0x48,
	0xac, 0x3a, 0xb1, 0x15, 0x1b, 0x35, 0x3c, 0x4d, 0x5f, 0xb5, 0xb2, 0x93, 0x10, 0x2a, 0x36, 0x91,
	0xe7, 0x9c, 0xf3, 0x8d, 0xe2, 0xf1, 0xa0, 0x91, 0x3e, 0x48, 0x50, 0x5e, 0x24, 0xb2, 0xc4, 0x95,
	0x99, 0xd0, 0x02, 0x8f, 0x58, 0x48, 0x95, 0x1b, 0x70, 0x06, 0xa9, 0x76, 0x8d, 0x3e, 0xb9, 0x8c,
	0x84, 0x88, 0x38, 0x78, 0xd6, 0xdf, 0xee, 0x77, 0x5e, 0xb8, 0xcf, 0xa8, 0x66, 0x22, 0x2d, 0x88,
	0xd9, 0x57, 0x13, 0x0d, 0x5f, 0x0e, 0x9b, 0xd5, 0x62, 0x29, 0x8d, 0xaa, 0x30, 0x46, 0xad, 0x58,
	0x28, 0x4d, 0x9c, 0xa9, 0x33, 0xef, 0xaf, 0xed, 0x19, 0x4f, 0x50, 0x6f, 0xaf, 0x20, 0x4b, 0x69,
	0x02, 0xa4, 0x61, 0xf5, 0x63, 0x6d, 0x3c, 0x49, 0x95, 0xfa, 0x14, 0x59, 0x48, 0x9a, 0x85, 0x57,
	0xd5, 0xf8, 0x2f, 0xea, 0xa8, 0x20, 0x86, 0x84, 0x92, 0x96, 0x75, 0xca, 0x0a, 0x8f, 0x51, 0x2f,
	0xa1, 0xb9, 0xcf, 0x42, 0x0e, 0xa4, 0x3d, 0x75, 0xe6, 0xed, 0x75, 0x37, 0xa1, 0xf9, 0x73, 0xc8,
	0x01, 0x5f, 0xa3, 0xdf, 0x95, 0xe5, 0x07, 0x22, 0x4d, 0x21, 0xb0, 0xbf, 0x45, 0x3a, 0x36, 0x86,
	0xcb, 0xd8, 0x43, 0xed, 0x54, 0x84, 0x90, 0x90, 0xfe, 0x20, 0xba, 0x47, 0x62, 0x29, 0x21, 0x3d,
	0x25, 0x56, 0xe8, 0x9f, 0x21, 0xea, 0xb0, 0xcf, 0xd9, 0x0e, 0xde, 0x58, 0x02, 0xa4, 0x37, 0x75,
	0xe6, 0x83, 0x9b, 0xb1, 0x5b, 0x4c, 0xcd, 0xad, 0xa6, 0xe6, 0x3e, 0x96, 0x53, 0x5b, 0xff, 0x49,
	0x68, 0x5e, 0xf7, 0x5a, 0x94, 0x1c, 0x26, 0xa8, 0x1b, 0xc4, 0x34, 0x53, 0xa0, 0x49, 0xdf, 0x5e,
	0xb5, 0x2a, 0xf1, 0x05, 0xea, 0x07, 0x82, 0x73, 0x4b, 0x13, 0x64, 0xbd, 0x5a, 0xc0, 0x57, 0x68,
	0xa8, 0xe9, 0x96, 0x83, 0x2f, 0x33, 0xd8, 0xb1, 0x9c, 0x0c, 0x6c, 0x60, 0x60, 0xb5, 0x57, 0x2b,
	0xcd, 0x9e, 0xd0, 0xaf, 0xcd, 0x6a, 0xc1, 0x34, 0x9c, 0xbc, 0x90, 0xa4, 0x3a, 0xae, 0x5e, 0xc8,
	0x9c, 0xcf, 0xfa, 0x34, 0xce, 0xfa, 0xdc, 0xff, 0x7f, 0x1f, 0x9b, 0xed, 0xf0, 0xe4, 0x47, 0xe4,
	0x15, 0x1b, 0x62, 0x37, 0xe7, 0xce, 0x7c, 0xb6, 0x1d, 0x7b, 0xd3, 0xdb, 0xef, 0x00, 0x00, 0x00,
	0xff, 0xff, 0x36, 0xd6, 0x9c, 0x6f, 0x53, 0x02, 0x00, 0x00,
}
