// Code generated by radius-dict-gen. DO NOT EDIT.

package rfc6572

import (
	"net"

	"layeh.com/radius"
)

const (
	MobileNodeIdentifier_Type           radius.Type = 145
	ServiceSelection_Type               radius.Type = 146
	PMIP6HomeLMAIPv6Address_Type        radius.Type = 147
	PMIP6VisitedLMAIPv6Address_Type     radius.Type = 148
	PMIP6HomeLMAIPv4Address_Type        radius.Type = 149
	PMIP6VisitedLMAIPv4Address_Type     radius.Type = 150
	PMIP6HomeHNPrefix_Type              radius.Type = 151
	PMIP6VisitedHNPrefix_Type           radius.Type = 152
	PMIP6HomeInterfaceID_Type           radius.Type = 153
	PMIP6VisitedInterfaceID_Type        radius.Type = 154
	PMIP6HomeDHCP4ServerAddress_Type    radius.Type = 157
	PMIP6VisitedDHCP4ServerAddress_Type radius.Type = 158
	PMIP6HomeDHCP6ServerAddress_Type    radius.Type = 159
	PMIP6VisitedDHCP6ServerAddress_Type radius.Type = 160
	PMIP6HomeIPv4Gateway_Type           radius.Type = 161
	PMIP6VisitedIPv4Gateway_Type        radius.Type = 162
)

func MobileNodeIdentifier_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	p.Add(MobileNodeIdentifier_Type, a)
	return
}

func MobileNodeIdentifier_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	p.Add(MobileNodeIdentifier_Type, a)
	return
}

func MobileNodeIdentifier_Get(p *radius.Packet) (value []byte) {
	value, _ = MobileNodeIdentifier_Lookup(p)
	return
}

func MobileNodeIdentifier_GetString(p *radius.Packet) (value string) {
	value, _ = MobileNodeIdentifier_LookupString(p)
	return
}

func MobileNodeIdentifier_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, avp := range p.Attributes {
		if avp.Type != MobileNodeIdentifier_Type {
			continue
		}
		attr := avp.Attribute
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func MobileNodeIdentifier_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, avp := range p.Attributes {
		if avp.Type != MobileNodeIdentifier_Type {
			continue
		}
		attr := avp.Attribute
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func MobileNodeIdentifier_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := p.Lookup(MobileNodeIdentifier_Type)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func MobileNodeIdentifier_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := p.Lookup(MobileNodeIdentifier_Type)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func MobileNodeIdentifier_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	p.Set(MobileNodeIdentifier_Type, a)
	return
}

func MobileNodeIdentifier_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	p.Set(MobileNodeIdentifier_Type, a)
	return
}

func MobileNodeIdentifier_Del(p *radius.Packet) {
	p.Attributes.Del(MobileNodeIdentifier_Type)
}

func ServiceSelection_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	p.Add(ServiceSelection_Type, a)
	return
}

func ServiceSelection_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	p.Add(ServiceSelection_Type, a)
	return
}

func ServiceSelection_Get(p *radius.Packet) (value []byte) {
	value, _ = ServiceSelection_Lookup(p)
	return
}

func ServiceSelection_GetString(p *radius.Packet) (value string) {
	value, _ = ServiceSelection_LookupString(p)
	return
}

func ServiceSelection_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, avp := range p.Attributes {
		if avp.Type != ServiceSelection_Type {
			continue
		}
		attr := avp.Attribute
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ServiceSelection_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, avp := range p.Attributes {
		if avp.Type != ServiceSelection_Type {
			continue
		}
		attr := avp.Attribute
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ServiceSelection_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := p.Lookup(ServiceSelection_Type)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func ServiceSelection_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := p.Lookup(ServiceSelection_Type)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func ServiceSelection_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	p.Set(ServiceSelection_Type, a)
	return
}

func ServiceSelection_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	p.Set(ServiceSelection_Type, a)
	return
}

func ServiceSelection_Del(p *radius.Packet) {
	p.Attributes.Del(ServiceSelection_Type)
}

func PMIP6HomeLMAIPv6Address_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPv6Addr(value)
	if err != nil {
		return
	}
	p.Add(PMIP6HomeLMAIPv6Address_Type, a)
	return
}

func PMIP6HomeLMAIPv6Address_Get(p *radius.Packet) (value net.IP) {
	value, _ = PMIP6HomeLMAIPv6Address_Lookup(p)
	return
}

func PMIP6HomeLMAIPv6Address_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, avp := range p.Attributes {
		if avp.Type != PMIP6HomeLMAIPv6Address_Type {
			continue
		}
		attr := avp.Attribute
		i, err = radius.IPv6Addr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func PMIP6HomeLMAIPv6Address_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := p.Lookup(PMIP6HomeLMAIPv6Address_Type)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPv6Addr(a)
	return
}

func PMIP6HomeLMAIPv6Address_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPv6Addr(value)
	if err != nil {
		return
	}
	p.Set(PMIP6HomeLMAIPv6Address_Type, a)
	return
}

func PMIP6HomeLMAIPv6Address_Del(p *radius.Packet) {
	p.Attributes.Del(PMIP6HomeLMAIPv6Address_Type)
}

func PMIP6VisitedLMAIPv6Address_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPv6Addr(value)
	if err != nil {
		return
	}
	p.Add(PMIP6VisitedLMAIPv6Address_Type, a)
	return
}

func PMIP6VisitedLMAIPv6Address_Get(p *radius.Packet) (value net.IP) {
	value, _ = PMIP6VisitedLMAIPv6Address_Lookup(p)
	return
}

func PMIP6VisitedLMAIPv6Address_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, avp := range p.Attributes {
		if avp.Type != PMIP6VisitedLMAIPv6Address_Type {
			continue
		}
		attr := avp.Attribute
		i, err = radius.IPv6Addr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func PMIP6VisitedLMAIPv6Address_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := p.Lookup(PMIP6VisitedLMAIPv6Address_Type)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPv6Addr(a)
	return
}

func PMIP6VisitedLMAIPv6Address_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPv6Addr(value)
	if err != nil {
		return
	}
	p.Set(PMIP6VisitedLMAIPv6Address_Type, a)
	return
}

func PMIP6VisitedLMAIPv6Address_Del(p *radius.Packet) {
	p.Attributes.Del(PMIP6VisitedLMAIPv6Address_Type)
}

func PMIP6HomeLMAIPv4Address_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	p.Add(PMIP6HomeLMAIPv4Address_Type, a)
	return
}

func PMIP6HomeLMAIPv4Address_Get(p *radius.Packet) (value net.IP) {
	value, _ = PMIP6HomeLMAIPv4Address_Lookup(p)
	return
}

func PMIP6HomeLMAIPv4Address_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, avp := range p.Attributes {
		if avp.Type != PMIP6HomeLMAIPv4Address_Type {
			continue
		}
		attr := avp.Attribute
		i, err = radius.IPAddr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func PMIP6HomeLMAIPv4Address_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := p.Lookup(PMIP6HomeLMAIPv4Address_Type)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPAddr(a)
	return
}

func PMIP6HomeLMAIPv4Address_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	p.Set(PMIP6HomeLMAIPv4Address_Type, a)
	return
}

func PMIP6HomeLMAIPv4Address_Del(p *radius.Packet) {
	p.Attributes.Del(PMIP6HomeLMAIPv4Address_Type)
}

func PMIP6VisitedLMAIPv4Address_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	p.Add(PMIP6VisitedLMAIPv4Address_Type, a)
	return
}

func PMIP6VisitedLMAIPv4Address_Get(p *radius.Packet) (value net.IP) {
	value, _ = PMIP6VisitedLMAIPv4Address_Lookup(p)
	return
}

func PMIP6VisitedLMAIPv4Address_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, avp := range p.Attributes {
		if avp.Type != PMIP6VisitedLMAIPv4Address_Type {
			continue
		}
		attr := avp.Attribute
		i, err = radius.IPAddr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func PMIP6VisitedLMAIPv4Address_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := p.Lookup(PMIP6VisitedLMAIPv4Address_Type)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPAddr(a)
	return
}

func PMIP6VisitedLMAIPv4Address_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	p.Set(PMIP6VisitedLMAIPv4Address_Type, a)
	return
}

func PMIP6VisitedLMAIPv4Address_Del(p *radius.Packet) {
	p.Attributes.Del(PMIP6VisitedLMAIPv4Address_Type)
}

func PMIP6HomeHNPrefix_Add(p *radius.Packet, value *net.IPNet) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPv6Prefix(value)
	if err != nil {
		return
	}
	p.Add(PMIP6HomeHNPrefix_Type, a)
	return
}

func PMIP6HomeHNPrefix_Get(p *radius.Packet) (value *net.IPNet) {
	value, _ = PMIP6HomeHNPrefix_Lookup(p)
	return
}

func PMIP6HomeHNPrefix_Gets(p *radius.Packet) (values []*net.IPNet, err error) {
	var i *net.IPNet
	for _, avp := range p.Attributes {
		if avp.Type != PMIP6HomeHNPrefix_Type {
			continue
		}
		attr := avp.Attribute
		i, err = radius.IPv6Prefix(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func PMIP6HomeHNPrefix_Lookup(p *radius.Packet) (value *net.IPNet, err error) {
	a, ok := p.Lookup(PMIP6HomeHNPrefix_Type)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPv6Prefix(a)
	return
}

func PMIP6HomeHNPrefix_Set(p *radius.Packet, value *net.IPNet) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPv6Prefix(value)
	if err != nil {
		return
	}
	p.Set(PMIP6HomeHNPrefix_Type, a)
	return
}

func PMIP6HomeHNPrefix_Del(p *radius.Packet) {
	p.Attributes.Del(PMIP6HomeHNPrefix_Type)
}

func PMIP6VisitedHNPrefix_Add(p *radius.Packet, value *net.IPNet) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPv6Prefix(value)
	if err != nil {
		return
	}
	p.Add(PMIP6VisitedHNPrefix_Type, a)
	return
}

func PMIP6VisitedHNPrefix_Get(p *radius.Packet) (value *net.IPNet) {
	value, _ = PMIP6VisitedHNPrefix_Lookup(p)
	return
}

func PMIP6VisitedHNPrefix_Gets(p *radius.Packet) (values []*net.IPNet, err error) {
	var i *net.IPNet
	for _, avp := range p.Attributes {
		if avp.Type != PMIP6VisitedHNPrefix_Type {
			continue
		}
		attr := avp.Attribute
		i, err = radius.IPv6Prefix(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func PMIP6VisitedHNPrefix_Lookup(p *radius.Packet) (value *net.IPNet, err error) {
	a, ok := p.Lookup(PMIP6VisitedHNPrefix_Type)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPv6Prefix(a)
	return
}

func PMIP6VisitedHNPrefix_Set(p *radius.Packet, value *net.IPNet) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPv6Prefix(value)
	if err != nil {
		return
	}
	p.Set(PMIP6VisitedHNPrefix_Type, a)
	return
}

func PMIP6VisitedHNPrefix_Del(p *radius.Packet) {
	p.Attributes.Del(PMIP6VisitedHNPrefix_Type)
}

func PMIP6HomeInterfaceID_Add(p *radius.Packet, value net.HardwareAddr) (err error) {
	var a radius.Attribute
	a, err = radius.NewIFID(value)
	if err != nil {
		return
	}
	p.Add(PMIP6HomeInterfaceID_Type, a)
	return
}

func PMIP6HomeInterfaceID_Get(p *radius.Packet) (value net.HardwareAddr) {
	value, _ = PMIP6HomeInterfaceID_Lookup(p)
	return
}

func PMIP6HomeInterfaceID_Gets(p *radius.Packet) (values []net.HardwareAddr, err error) {
	var i net.HardwareAddr
	for _, avp := range p.Attributes {
		if avp.Type != PMIP6HomeInterfaceID_Type {
			continue
		}
		attr := avp.Attribute
		i, err = radius.IFID(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func PMIP6HomeInterfaceID_Lookup(p *radius.Packet) (value net.HardwareAddr, err error) {
	a, ok := p.Lookup(PMIP6HomeInterfaceID_Type)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IFID(a)
	return
}

func PMIP6HomeInterfaceID_Set(p *radius.Packet, value net.HardwareAddr) (err error) {
	var a radius.Attribute
	a, err = radius.NewIFID(value)
	if err != nil {
		return
	}
	p.Set(PMIP6HomeInterfaceID_Type, a)
	return
}

func PMIP6HomeInterfaceID_Del(p *radius.Packet) {
	p.Attributes.Del(PMIP6HomeInterfaceID_Type)
}

func PMIP6VisitedInterfaceID_Add(p *radius.Packet, value net.HardwareAddr) (err error) {
	var a radius.Attribute
	a, err = radius.NewIFID(value)
	if err != nil {
		return
	}
	p.Add(PMIP6VisitedInterfaceID_Type, a)
	return
}

func PMIP6VisitedInterfaceID_Get(p *radius.Packet) (value net.HardwareAddr) {
	value, _ = PMIP6VisitedInterfaceID_Lookup(p)
	return
}

func PMIP6VisitedInterfaceID_Gets(p *radius.Packet) (values []net.HardwareAddr, err error) {
	var i net.HardwareAddr
	for _, avp := range p.Attributes {
		if avp.Type != PMIP6VisitedInterfaceID_Type {
			continue
		}
		attr := avp.Attribute
		i, err = radius.IFID(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func PMIP6VisitedInterfaceID_Lookup(p *radius.Packet) (value net.HardwareAddr, err error) {
	a, ok := p.Lookup(PMIP6VisitedInterfaceID_Type)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IFID(a)
	return
}

func PMIP6VisitedInterfaceID_Set(p *radius.Packet, value net.HardwareAddr) (err error) {
	var a radius.Attribute
	a, err = radius.NewIFID(value)
	if err != nil {
		return
	}
	p.Set(PMIP6VisitedInterfaceID_Type, a)
	return
}

func PMIP6VisitedInterfaceID_Del(p *radius.Packet) {
	p.Attributes.Del(PMIP6VisitedInterfaceID_Type)
}

func PMIP6HomeDHCP4ServerAddress_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	p.Add(PMIP6HomeDHCP4ServerAddress_Type, a)
	return
}

func PMIP6HomeDHCP4ServerAddress_Get(p *radius.Packet) (value net.IP) {
	value, _ = PMIP6HomeDHCP4ServerAddress_Lookup(p)
	return
}

func PMIP6HomeDHCP4ServerAddress_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, avp := range p.Attributes {
		if avp.Type != PMIP6HomeDHCP4ServerAddress_Type {
			continue
		}
		attr := avp.Attribute
		i, err = radius.IPAddr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func PMIP6HomeDHCP4ServerAddress_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := p.Lookup(PMIP6HomeDHCP4ServerAddress_Type)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPAddr(a)
	return
}

func PMIP6HomeDHCP4ServerAddress_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	p.Set(PMIP6HomeDHCP4ServerAddress_Type, a)
	return
}

func PMIP6HomeDHCP4ServerAddress_Del(p *radius.Packet) {
	p.Attributes.Del(PMIP6HomeDHCP4ServerAddress_Type)
}

func PMIP6VisitedDHCP4ServerAddress_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	p.Add(PMIP6VisitedDHCP4ServerAddress_Type, a)
	return
}

func PMIP6VisitedDHCP4ServerAddress_Get(p *radius.Packet) (value net.IP) {
	value, _ = PMIP6VisitedDHCP4ServerAddress_Lookup(p)
	return
}

func PMIP6VisitedDHCP4ServerAddress_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, avp := range p.Attributes {
		if avp.Type != PMIP6VisitedDHCP4ServerAddress_Type {
			continue
		}
		attr := avp.Attribute
		i, err = radius.IPAddr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func PMIP6VisitedDHCP4ServerAddress_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := p.Lookup(PMIP6VisitedDHCP4ServerAddress_Type)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPAddr(a)
	return
}

func PMIP6VisitedDHCP4ServerAddress_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	p.Set(PMIP6VisitedDHCP4ServerAddress_Type, a)
	return
}

func PMIP6VisitedDHCP4ServerAddress_Del(p *radius.Packet) {
	p.Attributes.Del(PMIP6VisitedDHCP4ServerAddress_Type)
}

func PMIP6HomeDHCP6ServerAddress_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPv6Addr(value)
	if err != nil {
		return
	}
	p.Add(PMIP6HomeDHCP6ServerAddress_Type, a)
	return
}

func PMIP6HomeDHCP6ServerAddress_Get(p *radius.Packet) (value net.IP) {
	value, _ = PMIP6HomeDHCP6ServerAddress_Lookup(p)
	return
}

func PMIP6HomeDHCP6ServerAddress_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, avp := range p.Attributes {
		if avp.Type != PMIP6HomeDHCP6ServerAddress_Type {
			continue
		}
		attr := avp.Attribute
		i, err = radius.IPv6Addr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func PMIP6HomeDHCP6ServerAddress_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := p.Lookup(PMIP6HomeDHCP6ServerAddress_Type)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPv6Addr(a)
	return
}

func PMIP6HomeDHCP6ServerAddress_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPv6Addr(value)
	if err != nil {
		return
	}
	p.Set(PMIP6HomeDHCP6ServerAddress_Type, a)
	return
}

func PMIP6HomeDHCP6ServerAddress_Del(p *radius.Packet) {
	p.Attributes.Del(PMIP6HomeDHCP6ServerAddress_Type)
}

func PMIP6VisitedDHCP6ServerAddress_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPv6Addr(value)
	if err != nil {
		return
	}
	p.Add(PMIP6VisitedDHCP6ServerAddress_Type, a)
	return
}

func PMIP6VisitedDHCP6ServerAddress_Get(p *radius.Packet) (value net.IP) {
	value, _ = PMIP6VisitedDHCP6ServerAddress_Lookup(p)
	return
}

func PMIP6VisitedDHCP6ServerAddress_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, avp := range p.Attributes {
		if avp.Type != PMIP6VisitedDHCP6ServerAddress_Type {
			continue
		}
		attr := avp.Attribute
		i, err = radius.IPv6Addr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func PMIP6VisitedDHCP6ServerAddress_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := p.Lookup(PMIP6VisitedDHCP6ServerAddress_Type)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPv6Addr(a)
	return
}

func PMIP6VisitedDHCP6ServerAddress_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPv6Addr(value)
	if err != nil {
		return
	}
	p.Set(PMIP6VisitedDHCP6ServerAddress_Type, a)
	return
}

func PMIP6VisitedDHCP6ServerAddress_Del(p *radius.Packet) {
	p.Attributes.Del(PMIP6VisitedDHCP6ServerAddress_Type)
}

func PMIP6HomeIPv4Gateway_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	p.Add(PMIP6HomeIPv4Gateway_Type, a)
	return
}

func PMIP6HomeIPv4Gateway_Get(p *radius.Packet) (value net.IP) {
	value, _ = PMIP6HomeIPv4Gateway_Lookup(p)
	return
}

func PMIP6HomeIPv4Gateway_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, avp := range p.Attributes {
		if avp.Type != PMIP6HomeIPv4Gateway_Type {
			continue
		}
		attr := avp.Attribute
		i, err = radius.IPAddr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func PMIP6HomeIPv4Gateway_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := p.Lookup(PMIP6HomeIPv4Gateway_Type)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPAddr(a)
	return
}

func PMIP6HomeIPv4Gateway_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	p.Set(PMIP6HomeIPv4Gateway_Type, a)
	return
}

func PMIP6HomeIPv4Gateway_Del(p *radius.Packet) {
	p.Attributes.Del(PMIP6HomeIPv4Gateway_Type)
}

func PMIP6VisitedIPv4Gateway_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	p.Add(PMIP6VisitedIPv4Gateway_Type, a)
	return
}

func PMIP6VisitedIPv4Gateway_Get(p *radius.Packet) (value net.IP) {
	value, _ = PMIP6VisitedIPv4Gateway_Lookup(p)
	return
}

func PMIP6VisitedIPv4Gateway_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, avp := range p.Attributes {
		if avp.Type != PMIP6VisitedIPv4Gateway_Type {
			continue
		}
		attr := avp.Attribute
		i, err = radius.IPAddr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func PMIP6VisitedIPv4Gateway_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := p.Lookup(PMIP6VisitedIPv4Gateway_Type)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPAddr(a)
	return
}

func PMIP6VisitedIPv4Gateway_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	p.Set(PMIP6VisitedIPv4Gateway_Type, a)
	return
}

func PMIP6VisitedIPv4Gateway_Del(p *radius.Packet) {
	p.Attributes.Del(PMIP6VisitedIPv4Gateway_Type)
}
