// Code generated by radius-dict-gen. DO NOT EDIT.

package rfc6519

import (
	"layeh.com/radius"
)

const (
	DSLiteTunnelName_Type radius.Type = 144
)

func DSLiteTunnelName_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	p.Add(DSLiteTunnelName_Type, a)
	return
}

func DSLiteTunnelName_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	p.Add(DSLiteTunnelName_Type, a)
	return
}

func DSLiteTunnelName_Get(p *radius.Packet) (value []byte) {
	value, _ = DSLiteTunnelName_Lookup(p)
	return
}

func DSLiteTunnelName_GetString(p *radius.Packet) (value string) {
	value, _ = DSLiteTunnelName_LookupString(p)
	return
}

func DSLiteTunnelName_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, avp := range p.Attributes {
		if avp.Type != DSLiteTunnelName_Type {
			continue
		}
		attr := avp.Attribute
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func DSLiteTunnelName_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, avp := range p.Attributes {
		if avp.Type != DSLiteTunnelName_Type {
			continue
		}
		attr := avp.Attribute
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func DSLiteTunnelName_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := p.Lookup(DSLiteTunnelName_Type)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func DSLiteTunnelName_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := p.Lookup(DSLiteTunnelName_Type)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func DSLiteTunnelName_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	p.Set(DSLiteTunnelName_Type, a)
	return
}

func DSLiteTunnelName_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	p.Set(DSLiteTunnelName_Type, a)
	return
}

func DSLiteTunnelName_Del(p *radius.Packet) {
	p.Attributes.Del(DSLiteTunnelName_Type)
}
