// Code generated by radius-dict-gen. DO NOT EDIT.

package rfc6677

import (
	"strconv"

	"layeh.com/radius"
)

const (
	EAPLowerLayer_Type radius.Type = 163
)

type EAPLowerLayer uint32

const (
	EAPLowerLayer_Value_WiredIEEE8021X     EAPLowerLayer = 1
	EAPLowerLayer_Value_IEEE8021XNoPreauth EAPLowerLayer = 2
	EAPLowerLayer_Value_IEEE8021XPreauth   EAPLowerLayer = 3
	EAPLowerLayer_Value_IEEE80216e         EAPLowerLayer = 4
	EAPLowerLayer_Value_IKEv2              EAPLowerLayer = 5
	EAPLowerLayer_Value_PPP                EAPLowerLayer = 6
	EAPLowerLayer_Value_PANANoPreauth      EAPLowerLayer = 7
	EAPLowerLayer_Value_GSSAPI             EAPLowerLayer = 8
	EAPLowerLayer_Value_PANAPreauth        EAPLowerLayer = 9
)

var EAPLowerLayer_Strings = map[EAPLowerLayer]string{
	EAPLowerLayer_Value_WiredIEEE8021X:     "Wired-IEEE-802.1X",
	EAPLowerLayer_Value_IEEE8021XNoPreauth: "IEEE-802.1X-No-Preauth",
	EAPLowerLayer_Value_IEEE8021XPreauth:   "IEEE-802.1X-Preauth",
	EAPLowerLayer_Value_IEEE80216e:         "IEEE-802.16e",
	EAPLowerLayer_Value_IKEv2:              "IKEv2",
	EAPLowerLayer_Value_PPP:                "PPP",
	EAPLowerLayer_Value_PANANoPreauth:      "PANA-No-Preauth",
	EAPLowerLayer_Value_GSSAPI:             "GSS-API",
	EAPLowerLayer_Value_PANAPreauth:        "PANA-Preauth",
}

func (a EAPLowerLayer) String() string {
	if str, ok := EAPLowerLayer_Strings[a]; ok {
		return str
	}
	return "EAPLowerLayer(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func EAPLowerLayer_Add(p *radius.Packet, value EAPLowerLayer) (err error) {
	a := radius.NewInteger(uint32(value))
	p.Add(EAPLowerLayer_Type, a)
	return
}

func EAPLowerLayer_Get(p *radius.Packet) (value EAPLowerLayer) {
	value, _ = EAPLowerLayer_Lookup(p)
	return
}

func EAPLowerLayer_Gets(p *radius.Packet) (values []EAPLowerLayer, err error) {
	var i uint32
	for _, avp := range p.Attributes {
		if avp.Type != EAPLowerLayer_Type {
			continue
		}
		attr := avp.Attribute
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, EAPLowerLayer(i))
	}
	return
}

func EAPLowerLayer_Lookup(p *radius.Packet) (value EAPLowerLayer, err error) {
	a, ok := p.Lookup(EAPLowerLayer_Type)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = EAPLowerLayer(i)
	return
}

func EAPLowerLayer_Set(p *radius.Packet, value EAPLowerLayer) (err error) {
	a := radius.NewInteger(uint32(value))
	p.Set(EAPLowerLayer_Type, a)
	return
}

func EAPLowerLayer_Del(p *radius.Packet) {
	p.Attributes.Del(EAPLowerLayer_Type)
}
