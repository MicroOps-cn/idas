// Code generated by radius-dict-gen. DO NOT EDIT.

package rfc5090

import (
	"layeh.com/radius"
)

const (
	DigestResponse_Type       radius.Type = 103
	DigestRealm_Type          radius.Type = 104
	DigestNonce_Type          radius.Type = 105
	DigestResponseAuth_Type   radius.Type = 106
	DigestNextnonce_Type      radius.Type = 107
	DigestMethod_Type         radius.Type = 108
	DigestURI_Type            radius.Type = 109
	DigestQop_Type            radius.Type = 110
	DigestAlgorithm_Type      radius.Type = 111
	DigestEntityBodyHash_Type radius.Type = 112
	DigestCNonce_Type         radius.Type = 113
	DigestNonceCount_Type     radius.Type = 114
	DigestUsername_Type       radius.Type = 115
	DigestOpaque_Type         radius.Type = 116
	DigestAuthParam_Type      radius.Type = 117
	DigestAKAAuts_Type        radius.Type = 118
	DigestDomain_Type         radius.Type = 119
	DigestStale_Type          radius.Type = 120
	DigestHA1_Type            radius.Type = 121
	SIPAOR_Type               radius.Type = 122
)

func DigestResponse_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	p.Add(DigestResponse_Type, a)
	return
}

func DigestResponse_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	p.Add(DigestResponse_Type, a)
	return
}

func DigestResponse_Get(p *radius.Packet) (value []byte) {
	value, _ = DigestResponse_Lookup(p)
	return
}

func DigestResponse_GetString(p *radius.Packet) (value string) {
	value, _ = DigestResponse_LookupString(p)
	return
}

func DigestResponse_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, avp := range p.Attributes {
		if avp.Type != DigestResponse_Type {
			continue
		}
		attr := avp.Attribute
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func DigestResponse_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, avp := range p.Attributes {
		if avp.Type != DigestResponse_Type {
			continue
		}
		attr := avp.Attribute
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func DigestResponse_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := p.Lookup(DigestResponse_Type)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func DigestResponse_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := p.Lookup(DigestResponse_Type)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func DigestResponse_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	p.Set(DigestResponse_Type, a)
	return
}

func DigestResponse_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	p.Set(DigestResponse_Type, a)
	return
}

func DigestResponse_Del(p *radius.Packet) {
	p.Attributes.Del(DigestResponse_Type)
}

func DigestRealm_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	p.Add(DigestRealm_Type, a)
	return
}

func DigestRealm_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	p.Add(DigestRealm_Type, a)
	return
}

func DigestRealm_Get(p *radius.Packet) (value []byte) {
	value, _ = DigestRealm_Lookup(p)
	return
}

func DigestRealm_GetString(p *radius.Packet) (value string) {
	value, _ = DigestRealm_LookupString(p)
	return
}

func DigestRealm_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, avp := range p.Attributes {
		if avp.Type != DigestRealm_Type {
			continue
		}
		attr := avp.Attribute
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func DigestRealm_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, avp := range p.Attributes {
		if avp.Type != DigestRealm_Type {
			continue
		}
		attr := avp.Attribute
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func DigestRealm_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := p.Lookup(DigestRealm_Type)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func DigestRealm_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := p.Lookup(DigestRealm_Type)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func DigestRealm_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	p.Set(DigestRealm_Type, a)
	return
}

func DigestRealm_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	p.Set(DigestRealm_Type, a)
	return
}

func DigestRealm_Del(p *radius.Packet) {
	p.Attributes.Del(DigestRealm_Type)
}

func DigestNonce_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	p.Add(DigestNonce_Type, a)
	return
}

func DigestNonce_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	p.Add(DigestNonce_Type, a)
	return
}

func DigestNonce_Get(p *radius.Packet) (value []byte) {
	value, _ = DigestNonce_Lookup(p)
	return
}

func DigestNonce_GetString(p *radius.Packet) (value string) {
	value, _ = DigestNonce_LookupString(p)
	return
}

func DigestNonce_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, avp := range p.Attributes {
		if avp.Type != DigestNonce_Type {
			continue
		}
		attr := avp.Attribute
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func DigestNonce_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, avp := range p.Attributes {
		if avp.Type != DigestNonce_Type {
			continue
		}
		attr := avp.Attribute
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func DigestNonce_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := p.Lookup(DigestNonce_Type)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func DigestNonce_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := p.Lookup(DigestNonce_Type)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func DigestNonce_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	p.Set(DigestNonce_Type, a)
	return
}

func DigestNonce_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	p.Set(DigestNonce_Type, a)
	return
}

func DigestNonce_Del(p *radius.Packet) {
	p.Attributes.Del(DigestNonce_Type)
}

func DigestResponseAuth_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	p.Add(DigestResponseAuth_Type, a)
	return
}

func DigestResponseAuth_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	p.Add(DigestResponseAuth_Type, a)
	return
}

func DigestResponseAuth_Get(p *radius.Packet) (value []byte) {
	value, _ = DigestResponseAuth_Lookup(p)
	return
}

func DigestResponseAuth_GetString(p *radius.Packet) (value string) {
	value, _ = DigestResponseAuth_LookupString(p)
	return
}

func DigestResponseAuth_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, avp := range p.Attributes {
		if avp.Type != DigestResponseAuth_Type {
			continue
		}
		attr := avp.Attribute
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func DigestResponseAuth_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, avp := range p.Attributes {
		if avp.Type != DigestResponseAuth_Type {
			continue
		}
		attr := avp.Attribute
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func DigestResponseAuth_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := p.Lookup(DigestResponseAuth_Type)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func DigestResponseAuth_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := p.Lookup(DigestResponseAuth_Type)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func DigestResponseAuth_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	p.Set(DigestResponseAuth_Type, a)
	return
}

func DigestResponseAuth_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	p.Set(DigestResponseAuth_Type, a)
	return
}

func DigestResponseAuth_Del(p *radius.Packet) {
	p.Attributes.Del(DigestResponseAuth_Type)
}

func DigestNextnonce_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	p.Add(DigestNextnonce_Type, a)
	return
}

func DigestNextnonce_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	p.Add(DigestNextnonce_Type, a)
	return
}

func DigestNextnonce_Get(p *radius.Packet) (value []byte) {
	value, _ = DigestNextnonce_Lookup(p)
	return
}

func DigestNextnonce_GetString(p *radius.Packet) (value string) {
	value, _ = DigestNextnonce_LookupString(p)
	return
}

func DigestNextnonce_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, avp := range p.Attributes {
		if avp.Type != DigestNextnonce_Type {
			continue
		}
		attr := avp.Attribute
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func DigestNextnonce_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, avp := range p.Attributes {
		if avp.Type != DigestNextnonce_Type {
			continue
		}
		attr := avp.Attribute
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func DigestNextnonce_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := p.Lookup(DigestNextnonce_Type)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func DigestNextnonce_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := p.Lookup(DigestNextnonce_Type)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func DigestNextnonce_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	p.Set(DigestNextnonce_Type, a)
	return
}

func DigestNextnonce_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	p.Set(DigestNextnonce_Type, a)
	return
}

func DigestNextnonce_Del(p *radius.Packet) {
	p.Attributes.Del(DigestNextnonce_Type)
}

func DigestMethod_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	p.Add(DigestMethod_Type, a)
	return
}

func DigestMethod_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	p.Add(DigestMethod_Type, a)
	return
}

func DigestMethod_Get(p *radius.Packet) (value []byte) {
	value, _ = DigestMethod_Lookup(p)
	return
}

func DigestMethod_GetString(p *radius.Packet) (value string) {
	value, _ = DigestMethod_LookupString(p)
	return
}

func DigestMethod_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, avp := range p.Attributes {
		if avp.Type != DigestMethod_Type {
			continue
		}
		attr := avp.Attribute
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func DigestMethod_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, avp := range p.Attributes {
		if avp.Type != DigestMethod_Type {
			continue
		}
		attr := avp.Attribute
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func DigestMethod_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := p.Lookup(DigestMethod_Type)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func DigestMethod_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := p.Lookup(DigestMethod_Type)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func DigestMethod_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	p.Set(DigestMethod_Type, a)
	return
}

func DigestMethod_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	p.Set(DigestMethod_Type, a)
	return
}

func DigestMethod_Del(p *radius.Packet) {
	p.Attributes.Del(DigestMethod_Type)
}

func DigestURI_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	p.Add(DigestURI_Type, a)
	return
}

func DigestURI_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	p.Add(DigestURI_Type, a)
	return
}

func DigestURI_Get(p *radius.Packet) (value []byte) {
	value, _ = DigestURI_Lookup(p)
	return
}

func DigestURI_GetString(p *radius.Packet) (value string) {
	value, _ = DigestURI_LookupString(p)
	return
}

func DigestURI_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, avp := range p.Attributes {
		if avp.Type != DigestURI_Type {
			continue
		}
		attr := avp.Attribute
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func DigestURI_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, avp := range p.Attributes {
		if avp.Type != DigestURI_Type {
			continue
		}
		attr := avp.Attribute
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func DigestURI_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := p.Lookup(DigestURI_Type)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func DigestURI_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := p.Lookup(DigestURI_Type)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func DigestURI_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	p.Set(DigestURI_Type, a)
	return
}

func DigestURI_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	p.Set(DigestURI_Type, a)
	return
}

func DigestURI_Del(p *radius.Packet) {
	p.Attributes.Del(DigestURI_Type)
}

func DigestQop_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	p.Add(DigestQop_Type, a)
	return
}

func DigestQop_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	p.Add(DigestQop_Type, a)
	return
}

func DigestQop_Get(p *radius.Packet) (value []byte) {
	value, _ = DigestQop_Lookup(p)
	return
}

func DigestQop_GetString(p *radius.Packet) (value string) {
	value, _ = DigestQop_LookupString(p)
	return
}

func DigestQop_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, avp := range p.Attributes {
		if avp.Type != DigestQop_Type {
			continue
		}
		attr := avp.Attribute
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func DigestQop_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, avp := range p.Attributes {
		if avp.Type != DigestQop_Type {
			continue
		}
		attr := avp.Attribute
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func DigestQop_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := p.Lookup(DigestQop_Type)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func DigestQop_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := p.Lookup(DigestQop_Type)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func DigestQop_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	p.Set(DigestQop_Type, a)
	return
}

func DigestQop_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	p.Set(DigestQop_Type, a)
	return
}

func DigestQop_Del(p *radius.Packet) {
	p.Attributes.Del(DigestQop_Type)
}

func DigestAlgorithm_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	p.Add(DigestAlgorithm_Type, a)
	return
}

func DigestAlgorithm_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	p.Add(DigestAlgorithm_Type, a)
	return
}

func DigestAlgorithm_Get(p *radius.Packet) (value []byte) {
	value, _ = DigestAlgorithm_Lookup(p)
	return
}

func DigestAlgorithm_GetString(p *radius.Packet) (value string) {
	value, _ = DigestAlgorithm_LookupString(p)
	return
}

func DigestAlgorithm_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, avp := range p.Attributes {
		if avp.Type != DigestAlgorithm_Type {
			continue
		}
		attr := avp.Attribute
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func DigestAlgorithm_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, avp := range p.Attributes {
		if avp.Type != DigestAlgorithm_Type {
			continue
		}
		attr := avp.Attribute
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func DigestAlgorithm_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := p.Lookup(DigestAlgorithm_Type)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func DigestAlgorithm_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := p.Lookup(DigestAlgorithm_Type)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func DigestAlgorithm_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	p.Set(DigestAlgorithm_Type, a)
	return
}

func DigestAlgorithm_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	p.Set(DigestAlgorithm_Type, a)
	return
}

func DigestAlgorithm_Del(p *radius.Packet) {
	p.Attributes.Del(DigestAlgorithm_Type)
}

func DigestEntityBodyHash_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	p.Add(DigestEntityBodyHash_Type, a)
	return
}

func DigestEntityBodyHash_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	p.Add(DigestEntityBodyHash_Type, a)
	return
}

func DigestEntityBodyHash_Get(p *radius.Packet) (value []byte) {
	value, _ = DigestEntityBodyHash_Lookup(p)
	return
}

func DigestEntityBodyHash_GetString(p *radius.Packet) (value string) {
	value, _ = DigestEntityBodyHash_LookupString(p)
	return
}

func DigestEntityBodyHash_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, avp := range p.Attributes {
		if avp.Type != DigestEntityBodyHash_Type {
			continue
		}
		attr := avp.Attribute
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func DigestEntityBodyHash_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, avp := range p.Attributes {
		if avp.Type != DigestEntityBodyHash_Type {
			continue
		}
		attr := avp.Attribute
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func DigestEntityBodyHash_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := p.Lookup(DigestEntityBodyHash_Type)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func DigestEntityBodyHash_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := p.Lookup(DigestEntityBodyHash_Type)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func DigestEntityBodyHash_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	p.Set(DigestEntityBodyHash_Type, a)
	return
}

func DigestEntityBodyHash_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	p.Set(DigestEntityBodyHash_Type, a)
	return
}

func DigestEntityBodyHash_Del(p *radius.Packet) {
	p.Attributes.Del(DigestEntityBodyHash_Type)
}

func DigestCNonce_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	p.Add(DigestCNonce_Type, a)
	return
}

func DigestCNonce_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	p.Add(DigestCNonce_Type, a)
	return
}

func DigestCNonce_Get(p *radius.Packet) (value []byte) {
	value, _ = DigestCNonce_Lookup(p)
	return
}

func DigestCNonce_GetString(p *radius.Packet) (value string) {
	value, _ = DigestCNonce_LookupString(p)
	return
}

func DigestCNonce_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, avp := range p.Attributes {
		if avp.Type != DigestCNonce_Type {
			continue
		}
		attr := avp.Attribute
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func DigestCNonce_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, avp := range p.Attributes {
		if avp.Type != DigestCNonce_Type {
			continue
		}
		attr := avp.Attribute
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func DigestCNonce_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := p.Lookup(DigestCNonce_Type)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func DigestCNonce_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := p.Lookup(DigestCNonce_Type)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func DigestCNonce_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	p.Set(DigestCNonce_Type, a)
	return
}

func DigestCNonce_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	p.Set(DigestCNonce_Type, a)
	return
}

func DigestCNonce_Del(p *radius.Packet) {
	p.Attributes.Del(DigestCNonce_Type)
}

func DigestNonceCount_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	p.Add(DigestNonceCount_Type, a)
	return
}

func DigestNonceCount_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	p.Add(DigestNonceCount_Type, a)
	return
}

func DigestNonceCount_Get(p *radius.Packet) (value []byte) {
	value, _ = DigestNonceCount_Lookup(p)
	return
}

func DigestNonceCount_GetString(p *radius.Packet) (value string) {
	value, _ = DigestNonceCount_LookupString(p)
	return
}

func DigestNonceCount_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, avp := range p.Attributes {
		if avp.Type != DigestNonceCount_Type {
			continue
		}
		attr := avp.Attribute
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func DigestNonceCount_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, avp := range p.Attributes {
		if avp.Type != DigestNonceCount_Type {
			continue
		}
		attr := avp.Attribute
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func DigestNonceCount_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := p.Lookup(DigestNonceCount_Type)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func DigestNonceCount_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := p.Lookup(DigestNonceCount_Type)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func DigestNonceCount_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	p.Set(DigestNonceCount_Type, a)
	return
}

func DigestNonceCount_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	p.Set(DigestNonceCount_Type, a)
	return
}

func DigestNonceCount_Del(p *radius.Packet) {
	p.Attributes.Del(DigestNonceCount_Type)
}

func DigestUsername_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	p.Add(DigestUsername_Type, a)
	return
}

func DigestUsername_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	p.Add(DigestUsername_Type, a)
	return
}

func DigestUsername_Get(p *radius.Packet) (value []byte) {
	value, _ = DigestUsername_Lookup(p)
	return
}

func DigestUsername_GetString(p *radius.Packet) (value string) {
	value, _ = DigestUsername_LookupString(p)
	return
}

func DigestUsername_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, avp := range p.Attributes {
		if avp.Type != DigestUsername_Type {
			continue
		}
		attr := avp.Attribute
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func DigestUsername_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, avp := range p.Attributes {
		if avp.Type != DigestUsername_Type {
			continue
		}
		attr := avp.Attribute
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func DigestUsername_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := p.Lookup(DigestUsername_Type)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func DigestUsername_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := p.Lookup(DigestUsername_Type)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func DigestUsername_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	p.Set(DigestUsername_Type, a)
	return
}

func DigestUsername_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	p.Set(DigestUsername_Type, a)
	return
}

func DigestUsername_Del(p *radius.Packet) {
	p.Attributes.Del(DigestUsername_Type)
}

func DigestOpaque_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	p.Add(DigestOpaque_Type, a)
	return
}

func DigestOpaque_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	p.Add(DigestOpaque_Type, a)
	return
}

func DigestOpaque_Get(p *radius.Packet) (value []byte) {
	value, _ = DigestOpaque_Lookup(p)
	return
}

func DigestOpaque_GetString(p *radius.Packet) (value string) {
	value, _ = DigestOpaque_LookupString(p)
	return
}

func DigestOpaque_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, avp := range p.Attributes {
		if avp.Type != DigestOpaque_Type {
			continue
		}
		attr := avp.Attribute
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func DigestOpaque_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, avp := range p.Attributes {
		if avp.Type != DigestOpaque_Type {
			continue
		}
		attr := avp.Attribute
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func DigestOpaque_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := p.Lookup(DigestOpaque_Type)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func DigestOpaque_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := p.Lookup(DigestOpaque_Type)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func DigestOpaque_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	p.Set(DigestOpaque_Type, a)
	return
}

func DigestOpaque_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	p.Set(DigestOpaque_Type, a)
	return
}

func DigestOpaque_Del(p *radius.Packet) {
	p.Attributes.Del(DigestOpaque_Type)
}

func DigestAuthParam_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	p.Add(DigestAuthParam_Type, a)
	return
}

func DigestAuthParam_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	p.Add(DigestAuthParam_Type, a)
	return
}

func DigestAuthParam_Get(p *radius.Packet) (value []byte) {
	value, _ = DigestAuthParam_Lookup(p)
	return
}

func DigestAuthParam_GetString(p *radius.Packet) (value string) {
	value, _ = DigestAuthParam_LookupString(p)
	return
}

func DigestAuthParam_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, avp := range p.Attributes {
		if avp.Type != DigestAuthParam_Type {
			continue
		}
		attr := avp.Attribute
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func DigestAuthParam_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, avp := range p.Attributes {
		if avp.Type != DigestAuthParam_Type {
			continue
		}
		attr := avp.Attribute
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func DigestAuthParam_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := p.Lookup(DigestAuthParam_Type)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func DigestAuthParam_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := p.Lookup(DigestAuthParam_Type)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func DigestAuthParam_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	p.Set(DigestAuthParam_Type, a)
	return
}

func DigestAuthParam_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	p.Set(DigestAuthParam_Type, a)
	return
}

func DigestAuthParam_Del(p *radius.Packet) {
	p.Attributes.Del(DigestAuthParam_Type)
}

func DigestAKAAuts_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	p.Add(DigestAKAAuts_Type, a)
	return
}

func DigestAKAAuts_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	p.Add(DigestAKAAuts_Type, a)
	return
}

func DigestAKAAuts_Get(p *radius.Packet) (value []byte) {
	value, _ = DigestAKAAuts_Lookup(p)
	return
}

func DigestAKAAuts_GetString(p *radius.Packet) (value string) {
	value, _ = DigestAKAAuts_LookupString(p)
	return
}

func DigestAKAAuts_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, avp := range p.Attributes {
		if avp.Type != DigestAKAAuts_Type {
			continue
		}
		attr := avp.Attribute
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func DigestAKAAuts_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, avp := range p.Attributes {
		if avp.Type != DigestAKAAuts_Type {
			continue
		}
		attr := avp.Attribute
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func DigestAKAAuts_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := p.Lookup(DigestAKAAuts_Type)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func DigestAKAAuts_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := p.Lookup(DigestAKAAuts_Type)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func DigestAKAAuts_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	p.Set(DigestAKAAuts_Type, a)
	return
}

func DigestAKAAuts_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	p.Set(DigestAKAAuts_Type, a)
	return
}

func DigestAKAAuts_Del(p *radius.Packet) {
	p.Attributes.Del(DigestAKAAuts_Type)
}

func DigestDomain_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	p.Add(DigestDomain_Type, a)
	return
}

func DigestDomain_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	p.Add(DigestDomain_Type, a)
	return
}

func DigestDomain_Get(p *radius.Packet) (value []byte) {
	value, _ = DigestDomain_Lookup(p)
	return
}

func DigestDomain_GetString(p *radius.Packet) (value string) {
	value, _ = DigestDomain_LookupString(p)
	return
}

func DigestDomain_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, avp := range p.Attributes {
		if avp.Type != DigestDomain_Type {
			continue
		}
		attr := avp.Attribute
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func DigestDomain_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, avp := range p.Attributes {
		if avp.Type != DigestDomain_Type {
			continue
		}
		attr := avp.Attribute
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func DigestDomain_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := p.Lookup(DigestDomain_Type)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func DigestDomain_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := p.Lookup(DigestDomain_Type)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func DigestDomain_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	p.Set(DigestDomain_Type, a)
	return
}

func DigestDomain_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	p.Set(DigestDomain_Type, a)
	return
}

func DigestDomain_Del(p *radius.Packet) {
	p.Attributes.Del(DigestDomain_Type)
}

func DigestStale_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	p.Add(DigestStale_Type, a)
	return
}

func DigestStale_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	p.Add(DigestStale_Type, a)
	return
}

func DigestStale_Get(p *radius.Packet) (value []byte) {
	value, _ = DigestStale_Lookup(p)
	return
}

func DigestStale_GetString(p *radius.Packet) (value string) {
	value, _ = DigestStale_LookupString(p)
	return
}

func DigestStale_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, avp := range p.Attributes {
		if avp.Type != DigestStale_Type {
			continue
		}
		attr := avp.Attribute
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func DigestStale_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, avp := range p.Attributes {
		if avp.Type != DigestStale_Type {
			continue
		}
		attr := avp.Attribute
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func DigestStale_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := p.Lookup(DigestStale_Type)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func DigestStale_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := p.Lookup(DigestStale_Type)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func DigestStale_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	p.Set(DigestStale_Type, a)
	return
}

func DigestStale_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	p.Set(DigestStale_Type, a)
	return
}

func DigestStale_Del(p *radius.Packet) {
	p.Attributes.Del(DigestStale_Type)
}

func DigestHA1_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	p.Add(DigestHA1_Type, a)
	return
}

func DigestHA1_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	p.Add(DigestHA1_Type, a)
	return
}

func DigestHA1_Get(p *radius.Packet) (value []byte) {
	value, _ = DigestHA1_Lookup(p)
	return
}

func DigestHA1_GetString(p *radius.Packet) (value string) {
	value, _ = DigestHA1_LookupString(p)
	return
}

func DigestHA1_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, avp := range p.Attributes {
		if avp.Type != DigestHA1_Type {
			continue
		}
		attr := avp.Attribute
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func DigestHA1_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, avp := range p.Attributes {
		if avp.Type != DigestHA1_Type {
			continue
		}
		attr := avp.Attribute
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func DigestHA1_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := p.Lookup(DigestHA1_Type)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func DigestHA1_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := p.Lookup(DigestHA1_Type)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func DigestHA1_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	p.Set(DigestHA1_Type, a)
	return
}

func DigestHA1_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	p.Set(DigestHA1_Type, a)
	return
}

func DigestHA1_Del(p *radius.Packet) {
	p.Attributes.Del(DigestHA1_Type)
}

func SIPAOR_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	p.Add(SIPAOR_Type, a)
	return
}

func SIPAOR_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	p.Add(SIPAOR_Type, a)
	return
}

func SIPAOR_Get(p *radius.Packet) (value []byte) {
	value, _ = SIPAOR_Lookup(p)
	return
}

func SIPAOR_GetString(p *radius.Packet) (value string) {
	value, _ = SIPAOR_LookupString(p)
	return
}

func SIPAOR_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, avp := range p.Attributes {
		if avp.Type != SIPAOR_Type {
			continue
		}
		attr := avp.Attribute
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func SIPAOR_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, avp := range p.Attributes {
		if avp.Type != SIPAOR_Type {
			continue
		}
		attr := avp.Attribute
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func SIPAOR_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := p.Lookup(SIPAOR_Type)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func SIPAOR_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := p.Lookup(SIPAOR_Type)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func SIPAOR_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	p.Set(SIPAOR_Type, a)
	return
}

func SIPAOR_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	p.Set(SIPAOR_Type, a)
	return
}

func SIPAOR_Del(p *radius.Packet) {
	p.Attributes.Del(SIPAOR_Type)
}
