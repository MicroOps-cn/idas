syntax = "proto3";
package idas.endpoint;
import public "gogoproto/gogo.proto";
import "v1/base.proto";
import "types/models.proto";
option go_package = "github.com/MicroOps-cn/idas/pkg/endpoint;endpoint";


message UserInfo{
  string id = 1[(gogoproto.jsontag) = "id", (gogoproto.moretags) = 'valid:"required"'];
  string username = 2[(gogoproto.jsontag) = "username", (gogoproto.moretags) = 'valid:"required"'];
  idas.service.models.UserMeta.UserStatus status = 3[(gogoproto.customtype) = "github.com/MicroOps-cn/idas/pkg/service/models.UserMeta_UserStatus", (gogoproto.nullable) = false];
  string storage = 4[(gogoproto.jsontag) = "storage", (gogoproto.moretags) = 'valid:"required"'];
  string email = 5;
  string full_name = 6[(gogoproto.jsontag) = "fullName,omitempty"];
  string avatar = 7;
  string phone_number = 8[(gogoproto.jsontag) = "phoneNumber,omitempty"];
  string role = 9;
  string role_id = 10[(gogoproto.jsontag) = "roleId,omitempty"];
  string login_time = 11[(gogoproto.jsontag) = "loginTime,omitempty"];
  string update_time = 12[(gogoproto.jsontag) = "updateTime", (gogoproto.moretags) = 'valid:"required"'];
  string create_time = 13[(gogoproto.jsontag) = "createTime", (gogoproto.moretags) = 'valid:"required"'];
  bool is_delete = 14[(gogoproto.jsontag) = "isDelete", (gogoproto.moretags) = 'valid:"required"'];
}

message GetUsersRequest{
  idas.endpoint.BaseListRequest base_list_request = 1[(gogoproto.embed) = true, (gogoproto.nullable) = false];
  string app = 2;
  string storage = 3;
  idas.service.models.UserMeta.UserStatus status = 4[(gogoproto.customtype) = "github.com/MicroOps-cn/idas/pkg/service/models.UserMeta_UserStatus",(gogoproto.nullable) = false];
}


message GetUserResponse{
  idas.endpoint.BaseResponse base_response = 1[(gogoproto.embed) = true, (gogoproto.nullable) = false, (gogoproto.jsontag) = ",omitempty"];
  UserInfo data = 2;
}
message GetUsersResponse{
  idas.endpoint.BaseListResponse base_list_response = 1[(gogoproto.embed) = true, (gogoproto.nullable) = false, (gogoproto.jsontag) = ",omitempty"];
  repeated UserInfo data = 2;
}

message PatchUserRequest{
  string id = 1;
  idas.service.models.UserMeta.UserStatus status = 2[(gogoproto.customtype) = "github.com/MicroOps-cn/idas/pkg/service/models.UserMeta_UserStatus"];
  bool is_delete = 3[(gogoproto.customtype) = "bool",(gogoproto.jsontag) = "isDelete,omitempty"];
  string storage = 4[(gogoproto.jsontag) = "storage", (gogoproto.moretags) = 'valid:"required"'];
}

message PatchUsersResponse{
  idas.endpoint.BaseTotalResponse base_total_response = 1[(gogoproto.embed) = true, (gogoproto.nullable) = false, (gogoproto.jsontag) = ",omitempty"];
}

message CreateUserResponse{
  idas.endpoint.BaseResponse base_response = 1[(gogoproto.embed) = true, (gogoproto.nullable) = false, (gogoproto.jsontag) = ",omitempty"];
  UserInfo data = 2;
}

message UserSourceType{}
message GetUserSourceResponse{
  idas.endpoint.BaseTotalResponse base_total_response = 1[(gogoproto.embed) = true, (gogoproto.nullable) = false, (gogoproto.jsontag) = ",omitempty"];
  UserSourceType data = 8[(gogoproto.customtype) = "map[string]string", (gogoproto.nullable) = false];
}

message ResetUserPasswordRequest{
  string token = 1;
  string old_password = 2[(gogoproto.jsontag) = "oldPassword,omitempty"];
  string user_id = 3[(gogoproto.jsontag) = "userId", (gogoproto.moretags) = 'valid:"required"'];
  string storage = 4;
  string new_password = 5[(gogoproto.jsontag) = "newPassword", (gogoproto.moretags) = 'valid:"required"'];
}

message ForgotUserPasswordRequest{
  string username = 1[(gogoproto.jsontag) = "username", (gogoproto.moretags) = 'valid:"required"'];
  string email = 2 [(gogoproto.jsontag) = "email", (gogoproto.moretags) = 'valid:"required"'];
}

message DeleteUserRequest{
  string id = 1[(gogoproto.jsontag) = "id", (gogoproto.moretags) = 'valid:"required"'];
  string storage = 2[(gogoproto.jsontag) = "storage", (gogoproto.moretags) = 'valid:"required"'];
}

message UpdateUserRequest{
  string id = 1[(gogoproto.jsontag) = "id", (gogoproto.moretags) = 'valid:"required"'];
  string username = 2[(gogoproto.jsontag) = "username", (gogoproto.moretags) = 'valid:"required"'];
  idas.service.models.UserMeta.UserStatus status = 3[(gogoproto.jsontag) = "status", (gogoproto.nullable) = false, (gogoproto.moretags) = 'valid:"required"', (gogoproto.customtype) = "github.com/MicroOps-cn/idas/pkg/service/models.UserMeta_UserStatus"];
  string storage = 4[(gogoproto.jsontag) = "storage", (gogoproto.moretags) = 'valid:"required"'];
  string email = 5;
  string full_name = 6[(gogoproto.jsontag) = "fullName,omitempty"];
  string avatar = 7;
  string phone_number = 8[(gogoproto.jsontag) = "phoneNumber,omitempty"];
  bool is_delete = 9[(gogoproto.jsontag) = "isDelete"];
}

message CreateUserRequest{
  string username = 1[(gogoproto.jsontag) = "username", (gogoproto.moretags) = 'valid:"required"'];
  string storage = 2[(gogoproto.jsontag) = "storage", (gogoproto.moretags) = 'valid:"required"'];
  string email = 3;
  string full_name = 4[(gogoproto.jsontag) = "fullName,omitempty"];
  string avatar = 5;
  string  phone_number = 6[(gogoproto.jsontag) = "phoneNumber,omitempty"];
  idas.service.models.UserMeta.UserStatus status = 7[(gogoproto.customtype) = "github.com/MicroOps-cn/idas/pkg/service/models.UserMeta_UserStatus"];
  bool is_delete = 9[(gogoproto.jsontag) = "isDelete,omitempty"];
}

message GetUserRequest{
  string id = 1[(gogoproto.jsontag) = "id", (gogoproto.moretags) = 'valid:"required"'];
  string username = 2[(gogoproto.jsontag) = "-"];
  string storage = 3[(gogoproto.jsontag) = "storage", (gogoproto.moretags) = 'valid:"required"'];
}

message UserKeyInfo{
  string id = 1[(gogoproto.jsontag) = "id", (gogoproto.moretags) = 'valid:"required"'];
  string update_time = 2[(gogoproto.jsontag) = "updateTime,omitempty", (gogoproto.moretags) = 'valid:"required"'];
  string create_time = 3[(gogoproto.jsontag) = "createTime,omitempty", (gogoproto.moretags) = 'valid:"required"'];
  string name = 4[(gogoproto.jsontag) = "name"];
  string user_id = 5[(gogoproto.jsontag) = "userId,omitempty"];
  string key = 6[(gogoproto.jsontag) = "key"];
  string secret = 7[(gogoproto.jsontag) = "secret"];
  string private = 8[(gogoproto.jsontag) = "private"];
}

message CreateUserKeyRequest{
  string user_id = 1[(gogoproto.jsontag) = "userId,omitempty", (gogoproto.moretags) = 'valid:"required"'];
  string name = 3[(gogoproto.jsontag) = "name", (gogoproto.moretags) = 'valid:"required"'];
}

message CreateUserKeyResponse{
  idas.endpoint.BaseResponse base_response = 1[(gogoproto.embed) = true, (gogoproto.nullable) = false, (gogoproto.jsontag) = ",omitempty"];
  UserKeyInfo data = 2;
}

message CreateKeyRequest{
  string user_id = 1[(gogoproto.jsontag) = "userId,omitempty", (gogoproto.moretags) = 'valid:"required"'];
  string name = 3[(gogoproto.jsontag) = "name", (gogoproto.moretags) = 'valid:"required"'];
}

message CreateKeyResponse{
  idas.endpoint.BaseResponse base_response = 1[(gogoproto.embed) = true, (gogoproto.nullable) = false, (gogoproto.jsontag) = ",omitempty"];
  UserKeyInfo data = 2;
}

message SendActivationMailRequest{
  string user_id = 1[(gogoproto.jsontag) = "userId,omitempty", (gogoproto.moretags) = 'valid:"required"'];
  string storage = 3[(gogoproto.jsontag) = "storage", (gogoproto.moretags) = 'valid:"required"'];
}

message ActivateAccountRequest{
  string token = 1;
  string user_id = 2[(gogoproto.jsontag) = "userId,omitempty", (gogoproto.moretags) = 'valid:"required"'];
  string storage = 3;
  string new_password = 4[(gogoproto.jsontag) = "newPassword,omitempty", (gogoproto.moretags) = 'valid:"required"'];
}