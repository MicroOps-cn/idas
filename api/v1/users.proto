syntax = "proto3";
package idas.endpoint;
import public "gogoproto/gogo.proto";
import "v1/base.proto";
import "types/models.proto";
option go_package = "idas/pkg/endpoint;endpoint";


message UserInfo{
  string id = 1[(gogoproto.jsontag) = "id", (gogoproto.moretags) = 'valid:"required"'];
  string username = 2[(gogoproto.jsontag) = "username", (gogoproto.moretags) = 'valid:"required"'];
  idas.service.models.UserMeta.UserStatus status = 3[(gogoproto.customtype) = "idas/pkg/service/models.UserMeta_UserStatus", (gogoproto.nullable) = false];
  string storage = 4[(gogoproto.jsontag) = "storage", (gogoproto.moretags) = 'valid:"required"'];
  string email = 5;
  string fullName = 6;
  string avatar = 7;
  string phoneNumber = 8;
  string role = 9;
  string roleId = 10;
  string loginTime = 11;
  string updateTime = 12[(gogoproto.jsontag) = "updateTime", (gogoproto.moretags) = 'valid:"required"'];
  string createTime = 13[(gogoproto.jsontag) = "createTime", (gogoproto.moretags) = 'valid:"required"'];
  bool isDelete = 14[(gogoproto.jsontag) = "isDelete", (gogoproto.moretags) = 'valid:"required"'];
}

message GetUsersRequest{
  idas.endpoint.BaseListRequest BaseListRequest = 1[(gogoproto.embed) = true, (gogoproto.nullable) = false];
  string app = 2;
  string storage = 3;
  idas.service.models.UserMeta.UserStatus status = 4[(gogoproto.customtype) = "idas/pkg/service/models.UserMeta_UserStatus",(gogoproto.nullable) = false];
}


message GetUserResponse{
  idas.endpoint.BaseResponse BaseResponse = 1[(gogoproto.embed) = true, (gogoproto.nullable) = false, (gogoproto.jsontag) = ",omitempty"];
  UserInfo data = 2;
}
message GetUsersResponse{
  idas.endpoint.BaseListResponse BaseListResponse = 1[(gogoproto.embed) = true, (gogoproto.nullable) = false, (gogoproto.jsontag) = ",omitempty"];
  repeated UserInfo data = 2;
}

message PatchUserRequest{
  string id = 1;
  idas.service.models.UserMeta.UserStatus status = 2[(gogoproto.customtype) = "idas/pkg/service/models.UserMeta_UserStatus"];
  bool isDelete = 3[(gogoproto.customtype) = "bool"];
  string storage = 4[(gogoproto.jsontag) = "storage", (gogoproto.moretags) = 'valid:"required"'];
}

message PatchUsersResponse{
  idas.endpoint.BaseTotalResponse BaseTotalResponse = 1[(gogoproto.embed) = true, (gogoproto.nullable) = false, (gogoproto.jsontag) = ",omitempty"];
}

message CreateUserResponse{
  idas.endpoint.BaseResponse BaseResponse = 1[(gogoproto.embed) = true, (gogoproto.nullable) = false, (gogoproto.jsontag) = ",omitempty"];
  UserInfo data = 2;
}

message UserSourceType{}
message GetUserSourceResponse{
  idas.endpoint.BaseTotalResponse BaseTotalResponse = 1[(gogoproto.embed) = true, (gogoproto.nullable) = false, (gogoproto.jsontag) = ",omitempty"];
  UserSourceType data = 8[(gogoproto.customtype) = "map[string]string", (gogoproto.nullable) = false];
}

message ResetUserPasswordRequest{
  string token = 1;
  string oldPassword = 2;
  string userId = 3[(gogoproto.jsontag) = "userId", (gogoproto.moretags) = 'valid:"required"'];
  string storage = 4;
  string newPassword = 5[(gogoproto.jsontag) = "newPassword", (gogoproto.moretags) = 'valid:"required"'];
}

message ForgotUserPasswordRequest{
  string username = 1[(gogoproto.jsontag) = "username", (gogoproto.moretags) = 'valid:"required"'];
  string email = 2 [(gogoproto.jsontag) = "email", (gogoproto.moretags) = 'valid:"required"'];
}

message DeleteUserRequest{
  string id = 1[(gogoproto.jsontag) = "id", (gogoproto.moretags) = 'valid:"required"'];
  string storage = 2[(gogoproto.jsontag) = "storage", (gogoproto.moretags) = 'valid:"required"'];
}

message UpdateUserRequest{
  string id = 1[(gogoproto.jsontag) = "id", (gogoproto.moretags) = 'valid:"required"'];
  string username = 2[(gogoproto.jsontag) = "username", (gogoproto.moretags) = 'valid:"required"'];
  idas.service.models.UserMeta.UserStatus status = 3[(gogoproto.jsontag) = "status", (gogoproto.nullable) = false, (gogoproto.moretags) = 'valid:"required"', (gogoproto.customtype) = "idas/pkg/service/models.UserMeta_UserStatus"];
  string storage = 4[(gogoproto.jsontag) = "storage", (gogoproto.moretags) = 'valid:"required"'];
  string email = 5;
  string fullName = 6;
  string avatar = 7;
  string phoneNumber = 8;
  bool isDelete = 9[(gogoproto.jsontag) = "isDelete"];
}

message CreateUserRequest{
  string username = 1[(gogoproto.jsontag) = "username", (gogoproto.moretags) = 'valid:"required"'];
  string storage = 2[(gogoproto.jsontag) = "storage", (gogoproto.moretags) = 'valid:"required"'];
  string email = 3;
  string fullName = 4;
  string avatar = 5;
  string phoneNumber = 6;
  idas.service.models.UserMeta.UserStatus status = 7[(gogoproto.customtype) = "idas/pkg/service/models.UserMeta_UserStatus"];
  bool isDelete = 8;
}

message GetUserRequest{
  string id = 1[(gogoproto.jsontag) = "id", (gogoproto.moretags) = 'valid:"required"'];
  string username = 2[(gogoproto.jsontag) = "-"];
  string storage = 3[(gogoproto.jsontag) = "storage", (gogoproto.moretags) = 'valid:"required"'];
}

message UserKeyInfo{
  string id = 1[(gogoproto.jsontag) = "id", (gogoproto.moretags) = 'valid:"required"'];
  string updateTime = 2[(gogoproto.jsontag) = "updateTime", (gogoproto.moretags) = 'valid:"required"'];
  string createTime = 3[(gogoproto.jsontag) = "createTime", (gogoproto.moretags) = 'valid:"required"'];
  string name = 4[(gogoproto.jsontag) = "name"];
  string userId = 5[(gogoproto.jsontag) = "userId"];
  string key = 6[(gogoproto.jsontag) = "key"];
  string secret = 7[(gogoproto.jsontag) = "secret"];
  string private = 8[(gogoproto.jsontag) = "private"];
}

message CreateUserKeyRequest{
  string userId = 1[(gogoproto.jsontag) = "userId", (gogoproto.moretags) = 'valid:"required"'];
  string name = 3[(gogoproto.jsontag) = "name", (gogoproto.moretags) = 'valid:"required"'];
}

message CreateUserKeyResponse{
  idas.endpoint.BaseResponse BaseResponse = 1[(gogoproto.embed) = true, (gogoproto.nullable) = false, (gogoproto.jsontag) = ",omitempty"];
  UserKeyInfo data = 2;
}

message CreateKeyRequest{
  string userId = 1[(gogoproto.jsontag) = "userId", (gogoproto.moretags) = 'valid:"required"'];
  string name = 3[(gogoproto.jsontag) = "name", (gogoproto.moretags) = 'valid:"required"'];
}

message CreateKeyResponse{
  idas.endpoint.BaseResponse BaseResponse = 1[(gogoproto.embed) = true, (gogoproto.nullable) = false, (gogoproto.jsontag) = ",omitempty"];
  UserKeyInfo data = 2;
}

message SendActivationMailRequest{
  string userId = 1[(gogoproto.jsontag) = "userId", (gogoproto.moretags) = 'valid:"required"'];
  string storage = 3[(gogoproto.jsontag) = "storage", (gogoproto.moretags) = 'valid:"required"'];
}

message ActivateAccountRequest{
  string token = 1;
  string userId = 2[(gogoproto.jsontag) = "userId", (gogoproto.moretags) = 'valid:"required"'];
  string storage = 3;
  string newPassword = 4[(gogoproto.jsontag) = "newPassword", (gogoproto.moretags) = 'valid:"required"'];
}