syntax = "proto3";
import "types/gorm.proto";
import "types/redis.proto";
import "types/ldap.proto";
import "types/capacity.proto";
import "types/email.proto";
import "types/geoip.proto";
import public "gogoproto/gogo.proto";
package idas.config;
option go_package = "github.com/MicroOps-cn/idas/config;config";


message StorageRef{
  Storage storage = 1;
  string path = 2;
  string name = 3;
}

message Storage{
  string name = 1;
  oneof source{
    StorageRef ref = 10;
    idas.client.gorm.MySQLOptions mysql = 11[(gogoproto.customtype) = "github.com/MicroOps-cn/idas/pkg/client/gorm.MySQLClient"]; // MySQL Database Config
    idas.client.redis.RedisOptions redis = 12[(gogoproto.customtype) = "github.com/MicroOps-cn/idas/pkg/client/redis.Client"]; // Redis Database Config
    idas.client.ldap.LdapOptions ldap = 13[(gogoproto.customtype) = "github.com/MicroOps-cn/idas/pkg/client/ldap.Client"]; // LdapDatabaseConfig
    idas.client.gorm.SQLiteOptions sqlite = 14[(gogoproto.customtype) = "github.com/MicroOps-cn/idas/pkg/client/gorm.SQLiteClient"]; // MySQL Database Config
  };
}

message Storages{
  Storage default = 1;
  Storage session = 2;
  Storage user = 3;
  Storage logging = 4;
  idas.client.geoip.GeoIPOptions geoip = 15[(gogoproto.customtype) = "github.com/MicroOps-cn/idas/pkg/client/geoip.Client"]; // MySQL Database Config
}

message GlobalOptions{
  idas.pkg.utils.Capacity max_upload_size = 1;
  idas.pkg.utils.Capacity max_body_size = 2;
  string upload_path = 3;
  string workspace = 4;
  string secret = 5;
  string jwt_secret = 6;
  string geoip2_file = 7;
}

message security{
  repeated string trust_ip = 1[(gogoproto.customtype) = "github.com/MicroOps-cn/fuck/sets.IPNet"];
}

message Config {
  Storages storage = 1;
  GlobalOptions global = 2;
  idas.client.email.SmtpOptions smtp = 3[(gogoproto.customtype) = "github.com/MicroOps-cn/idas/pkg/client/email.SmtpOptions"];
  security security = 4;
}

// @sync-to-public:public/src/services/idas/enums.ts:PasswordComplexity
enum PasswordComplexity{
  unsafe = 0;
  general = 1;
  safe = 2;
  very_safe = 3;
}

message RuntimeSecurityConfig{
  bool force_enable_mfa = 1[(gogoproto.jsontag) = "forceEnableMfa"];
  PasswordComplexity  password_complexity = 2[(gogoproto.jsontag) = "passwordComplexity"];
  uint32 password_min_length = 3[(gogoproto.jsontag) = "passwordMinLength"];
  uint32 password_expire_time = 4[(gogoproto.jsontag) = "passwordExpireTime"];
  uint32 password_failed_lock_threshold = 5[(gogoproto.jsontag) = "passwordFailedLockThreshold"];
  uint32 password_failed_lock_duration = 6[(gogoproto.jsontag) = "passwordFailedLockDuration"];
  uint32 password_history = 7[(gogoproto.jsontag) = "passwordHistory"];
  uint32 account_inactive_lock = 8[(gogoproto.jsontag) = "accountInactiveLock"];
  uint32 login_session_inactivity_time = 9[(gogoproto.jsontag) = "loginSessionInactivityTime"];
  uint32 login_session_max_time = 10[(gogoproto.jsontag) = "loginSessionMaxTime"];
}

message RuntimeConfig {
  RuntimeSecurityConfig security = 1;
}